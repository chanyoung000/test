import pandas as pd
import re
import requests
import folium
import tkinter as tk
from tkinter import messagebox, ttk, filedialog, colorchooser
import json
import webbrowser
import os
import sys
import geopandas as gpd
from shapely.geometry import shape
import openpyxl
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ====== VWorld API 키 ======
if getattr(sys, 'frozen', False):
    base_dir = os.path.dirname(sys.executable)
else:
    base_dir = os.path.dirname(os.path.abspath(__file__))

key_path = os.path.join(base_dir, 'vworld_key.txt')
with open(key_path, 'r') as f:
    vworld_key = f.read().strip()

# ====== 시도/시군구 샘플 ======
sigungu_dict = {
    "서울특별시": ["종로구", "중구", "용산구", "성동구", "광진구", "동대문구", "중랑구", "성북구",
               "강북구", "도봉구", "노원구", "은평구", "서대문구", "마포구", "양천구", "강서구",
               "구로구", "금천구", "영등포구", "동작구", "관악구", "서초구", "강남구", "송파구", "강동구"],
    "부산광역시": ["중구", "서구", "동구", "영도구", "부산진구", "동래구", "남구", "북구",
                "해운대구", "사하구", "금정구", "강서구", "연제구", "수영구", "사상구", "기장군"],
    "대구광역시": ["중구", "동구", "서구", "남구", "북구", "수성구", "달서구", "달성군", "군위군"],
    "인천광역시": ["중구", "동구", "미추홀구", "연수구", "남동구", "부평구", "계양구", "서구", "강화군", "옹진군"],
    "광주광역시": ["동구", "서구", "남구", "북구", "광산구"],
    "대전광역시": ["동구", "중구", "서구", "유성구", "대덕구"],
    "울산광역시": ["중구", "남구", "동구", "북구", "울주군"],
    "세종특별자치시": ["세종시"],
    "경기도": ["성남시 수정구", "성남시 중원구", "성남시 분당구", "의정부시", "안양시 만안구",
             "하남시", "용인시 처인구", "용인시 기흥구", "용인시 수지구", "파주시",
             "수원시 장안구", "수원시 권선구", "수원시 팔달구", "수원시 영통구",
             "안양시 동안구", "부천시", "광명시", "평택시", "동두천시", "안산시 상록구",
             "안산시 단원구", "고양시 덕양구", "고양시 일산동구", "고양시 일산서구",
             "과천시", "구리시", "남양주시", "오산시", "시흥시", "군포시", "의왕시",
             "이천시", "안성시", "김포시", "화성시", "광주시", "여주시", "양평군",
             "연천군", "포천시", "가평군"],
    "강원특별자치도": ["춘천시", "원주시", "강릉시", "동해시", "태백시", "속초시", "삼척시",
               "홍천군", "횡성군", "영월군", "평창군", "정선군", "철원군", "화천군",
               "양구군", "인제군", "고성군", "양양군"],
    "충청북도": ["청주시 상당구", "청주시 서원구", "청주시 흥덕구", "청주시 청원구",
             "충주시", "제천시", "보은군", "옥천군", "영동군", "증평군", "진천군",
             "괴산군", "음성군", "단양군"],
    "충청남도": ["천안시 동남구", "천안시 서북구", "공주시", "보령시", "아산시",
             "서산시", "논산시", "계룡시", "당진시", "금산군", "부여군", "서천군",
             "청양군", "홍성군", "예산군", "태안군"],
    "전북특별자치도": ["전주시 완산구", "전주시 덕진구", "군산시", "익산시", "정읍시",
             "남원시", "김제시", "완주군", "진안군", "무주군", "장수군", "임실군",
             "순창군", "고창군", "부안군"],
    "전라남도": ["목포시", "여수시", "순천시", "나주시", "광양시", "담양군", "곡성군",
             "구례군", "고흥군", "보성군", "화순군", "장흥군", "강진군", "해남군",
             "영암군", "무안군", "함평군", "영광군", "장성군", "완도군", "진도군",
             "신안군"],
    "경상북도": ["포항시 남구", "포항시 북구", "경주시", "김천시", "안동시", "구미시",
             "영주시", "영천시", "상주시", "문경시", "경산시", "군위군", "의성군",
             "청송군", "영양군", "영덕군", "청도군", "고령군", "성주군", "칠곡군",
             "예천군", "봉화군", "울진군", "울릉군"],
    "경상남도": ["창원시 의창구", "창원시 성산구", "창원시 마산합포구", "창원시 마산회원구",
             "창원시 진해구", "진주시", "통영시", "사천시", "김해시", "밀양시",
             "거제시", "양산시", "의령군", "함안군", "창녕군", "고성군", "남해군",
             "하동군", "산청군", "함양군", "거창군", "합천군"],
    "제주특별자치도": ["제주시", "서귀포시"]
}
sido_list = list(sigungu_dict.keys())

# ====== 법정동코드 불러오기 ======
if getattr(sys, 'frozen', False):
    base_dir = os.path.dirname(sys.executable)
else:
    base_dir = os.path.dirname(os.path.abspath(__file__))

csv_path = os.path.join(base_dir, '국토교통부_법정동코드_20240805.csv')
dong_df = pd.read_csv(csv_path, encoding="cp949")
dong_df = dong_df[dong_df["폐지여부"] == "존재"]
dong_dict = dict(zip(dong_df["법정동명"], dong_df["법정동코드"]))

def save_to_excel():
    if not excel_features:
        messagebox.showerror("오류", "엑셀로 저장할 데이터가 없습니다. 먼저 '지도 생성'을 실행하세요.")
        return
    save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")], title="엑셀 저장 위치 선택")
    if not save_path:
        return
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "지적도 정보"
    ws.append(["주소", "지목", "면적", "소유구분", "공유인수", "용도지역"])
    for f in excel_features:
        p = f.get("properties", {})
        addr = p.get("addr", "")
        jimo = p.get("지목", "")
        area = p.get("면적", "")
        owner_type = p.get("소유구분", "")
        owner_count = p.get("공유인수", "")
        usage = p.get("용도지역", "")
        ws.append([addr, jimo, area, owner_type, owner_count, usage])
    wb.save(save_path)
    messagebox.showinfo("완료", "엑셀 파일이 저장되었습니다.")

def address_to_pnu(address: str) -> str:
    is_san = bool(re.search(r'\b산\s*\d+', address))
    match = re.search(r'(.+?(동|읍|면|리|로\s?\d+가|가\s?\d+가?))\s*(산)?\s*(\d+)-?(\d*)', address)
    if not match:
        raise ValueError("주소 형식을 인식할 수 없습니다.")
    dong_name = match.group(1).strip()
    main_number = match.group(4).zfill(4)
    sub_number = match.group(5).zfill(4) if match.group(5) else '0000'
    san_code = '2' if is_san else '1'
    if dong_name not in dong_dict:
        raise ValueError(f"동 이름 '{dong_name}'에 해당하는 법정동코드를 찾을 수 없습니다.")
    bjd_code = dong_dict[dong_name]
    return f"{bjd_code}{san_code}{main_number}{sub_number}"

def get_geojson_by_pnu(pnu: str):
    def get_ladfrl_details(pnu):
        try:
            url = "https://api.vworld.kr/ned/data/ladfrlList"
            params = {
                "key": vworld_key,
                "domain": "land",
                "pnu": pnu,
                "format": "json",
                "numOfRows": "1",
                "pageNo": "1"
            }
            res = requests.get(url, params=params, verify=False)
            res.raise_for_status()
            data = res.json()
            item = data.get("ladfrlVOList", {}).get("ladfrlVOList", [{}])[0]
            area = item.get("lndpclAr", "")
            try:
                area_float = float(area)
                pyung = area_float * 0.3025
                area_formatted = f"{pyung:,.0f}평"
            except:
                area_formatted = ""
            return {
                "지목": item.get("lndcgrCodeNm", ""),
                "면적": area_formatted,
                "소유구분": item.get("posesnSeCodeNm", ""),
                "공유인수": item.get("cnrsPsnCo", "")
            }
        except Exception as e:
            return {"지목": "", "면적": "", "소유구분": "", "공유인수": ""}
    def get_landuse_from_vworld(pnu):
        try:
            url = "https://api.vworld.kr/ned/wfs/getLandUseWFS"
            params = {
                "key": vworld_key,
                "domain": "landuse",
                "typename": "dt_d154",
                "pnu": pnu,
                "maxFeatures": "10",
                "resultType": "results",
                "srsName": "EPSG:4326",
                "output": "application/json"
            }
            res = requests.get(url, params=params, verify=False)
            res.raise_for_status()
            data = res.json()
            features = data.get("features", [])
            usage = ""
            if features:
                usage = features[0].get("properties", {}).get("prpos_area_dstrc_nm_list", "")
            return {"용도지역": usage.strip()}
        except Exception as e:
            return {"용도지역": f"(조회 실패: {e})"}
    url = "http://api.vworld.kr/req/data"
    params = {
        "service": "data",
        "request": "GetFeature",
        "key": vworld_key,
        "data": "LP_PA_CBND_BUBUN",
        "attrFilter": f"pnu:=:{pnu}",
        "format": "json",
        "crs": "EPSG:4326"
    }
    res = requests.get(url, params=params)
    data = res.json()
    features = (
            data.get("features") or
            data.get("result", {}).get("featureCollection", {}).get("features") or
            data.get("response", {}).get("result", {}).get("featureCollection", {}).get("features")
    )
    if not features:
        raise ValueError("GeoJSON에 필지 정보가 없습니다.")

    luris_info = get_landuse_from_vworld(pnu)

    for f in features:
        f["properties"]["용도지역"] = luris_info.get("용도지역", "")
        lad_info = get_ladfrl_details(pnu)
        f["properties"].update(lad_info)

    return {"type": "FeatureCollection", "features": features}

def get_center_from_geojson(geojson):
    coords = geojson['features'][0]['geometry']['coordinates'][0][0]
    lons, lats = zip(*coords)
    return sum(lats) / len(lats), sum(lons) / len(lons)

def create_map_with_outer_and_inner_layers(geojson, address_styles, stroke_color='#FFA500', fill_color='white', fill_opacity=0.2, inner_weight=2, outer_weight=4):
    output_file = filedialog.asksaveasfilename(defaultextension=".html", filetypes=[("HTML files", "*.html")],
                                               title="지도를 저장할 위치를 선택하세요")
    if not output_file:
        return
    lat, lon = get_center_from_geojson(geojson)
    tile_url = f"https://api.vworld.kr/req/wmts/1.0.0/{vworld_key}/Satellite/{{z}}/{{y}}/{{x}}.jpeg"
    m = folium.Map(location=[lat, lon], zoom_start=18, tiles=None)
    folium.TileLayer(tiles=tile_url, attr='VWorld Satellite', name='위성지도', detectRetina=True).add_to(m)

    def white_feature_style(x):
        return {
            'fillColor': 'white',
            'color': 'white',
            'weight': inner_weight,
            'fillOpacity': 0.2
        }

    inner_white_layer = folium.FeatureGroup(name="개별 필지+내부경계(흰색)", show=True)
    folium.GeoJson(
        geojson,
        name="개별 필지+내부경계(흰색)",
        style_function=white_feature_style,
        tooltip=None
    ).add_to(inner_white_layer)
    m.add_child(inner_white_layer)

    def styled_feature_style(x):
        addr = x["properties"].get("addr", "")
        style = address_styles.get(addr)
        if not style or not style.get("stroke") or not style.get("fill"):
            return {
                'fillColor': 'white',
                'color': 'white',
                'weight': inner_weight,
                'fillOpacity': 0.2
            }
        return {
            'fillColor': style.get("fill", 'white'),
            'color': style.get("stroke", 'white'),
            'weight': inner_weight,
            'fillOpacity': style.get("opacity", 0.2)
        }

    styled_features = [f for f in geojson['features']
                       if address_styles.get(f['properties'].get('addr', '')) and
                          address_styles.get(f['properties'].get('addr', '')).get("stroke") and
                          address_styles.get(f['properties'].get('addr', '')).get("fill")]

    if styled_features:
        styled_layer = folium.FeatureGroup(name="개별 필지+내부경계(스타일)", show=True)
        folium.GeoJson(
            {"type": "FeatureCollection", "features": styled_features},
            name="개별 필지+내부경계(스타일)",
            style_function=styled_feature_style,
            tooltip=folium.GeoJsonTooltip(
                fields=['addr', '지목', '면적', '소유구분', '공유인수', '용도지역'],
                aliases=['주소', '지목', '면적', '소유구분', '공유인수', '용도지역']
            )
        ).add_to(styled_layer)
        m.add_child(styled_layer)

    from collections import defaultdict
    from shapely.ops import unary_union

    addr_polys = defaultdict(list)
    for f in geojson['features']:
        addr = f.get('properties', {}).get('addr', '')
        addr_polys[addr].append(shape(f['geometry']))

    outer_layer = folium.FeatureGroup(name="주소별 외곽선")
    outer_style = lambda x: {
        'fillColor': 'none',
        'color': 'white',
        'weight': outer_weight,
        'fillOpacity': 0
    }
    for polys in addr_polys.values():
        merged = unary_union(polys)
        merged_gdf = gpd.GeoDataFrame(geometry=[merged])
        merged_geojson = json.loads(merged_gdf.to_json())
        folium.GeoJson(
            merged_geojson,
            style_function=outer_style,
            tooltip=None
        ).add_to(outer_layer)
    m.add_child(outer_layer)

    # 개발제한구역 WMS 레이어 추가
    folium.WmsTileLayer(
        url=f"http://api.vworld.kr/req/wms?key={vworld_key}",
        name="개발제한구역",
        layers="lt_c_ud801",  # 예시: 문서에 나온 개발제한구역 레이어명; 실제 명칭인지 확인해야 함
        fmt="image/png",
        transparent=True,
        version="1.3.0",
        attr="VWorld",
        overlay=True,
        control=True,
        show=True
    ).add_to(m)

    # 공익용산지 WMS 추가 (NEINS 서비스)
    neins_key = "RFW3-NXDZ-3CID-JAWS"

    # 공익용산지 레이어 (layerNmEng = nem_law_42)
    folium.WmsTileLayer(
        url=f"https://ecvam.neins.go.kr/apicall.do?APIKEY={neins_key}",
        name="공익용산지",
        layers="nem_law_42",  # apiLayerWMSList에서 확인한 값
        fmt="image/png",
        transparent=True,
        version="1.1.0",  # JS 예제에 맞춰서 1.1.0
        attr="산지정보시스템(NEINS)",
        overlay=True,
        control=True,
        show=True,
        opacity=0.1
    ).add_to(m)

    folium.LayerControl().add_to(m)
    m.save(output_file)
    webbrowser.open(output_file)

def create_outer_only_map(geojson, outer_weight=4):
    output_file = filedialog.asksaveasfilename(defaultextension=".html", filetypes=[("HTML files", "*.html")],
                                               title="외곽선 지도를 저장할 위치를 선택하세요")
    if not output_file:
        return
    lat, lon = get_center_from_geojson(geojson)
    tile_url = f"https://api.vworld.kr/req/wmts/1.0.0/{vworld_key}/Satellite/{{z}}/{{y}}/{{x}}.jpeg"
    m = folium.Map(location=[lat, lon], zoom_start=18, tiles=None)
    folium.TileLayer(tiles=tile_url, attr='VWorld Satellite', name='위성지도', detectRetina=True).add_to(m)
    from collections import defaultdict
    from shapely.ops import unary_union

    addr_polys = defaultdict(list)
    for f in geojson['features']:
        addr = f.get('properties', {}).get('addr', '')
        addr_polys[addr].append(shape(f['geometry']))

    outer_style = lambda x: {
        'fillColor': 'none',
        'color': 'white',
        'weight': outer_weight,
        'fillOpacity': 0
    }
    for polys in addr_polys.values():
        merged = unary_union(polys)
        merged_gdf = gpd.GeoDataFrame(geometry=[merged])
        merged_geojson = json.loads(merged_gdf.to_json())
        folium.GeoJson(
            merged_geojson,
            style_function=outer_style,
            tooltip=None
        ).add_to(m)
    m.save(output_file)
    webbrowser.open(output_file)



def load_addresses_from_input_csv(address_list, checklist):
    base_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(os.path.abspath(__file__))
    csv_file = os.path.join(base_dir, "input.csv")
    if not os.path.exists(csv_file):
        messagebox.showerror("오류", "input.csv 파일이 없습니다.")
        return
    try:
        df = pd.read_csv(csv_file, encoding="utf-8-sig")
        for row in df.iloc[:, 0]:
            addr = str(row).strip()
            if addr:
                address_list.append(addr)
                checklist.insert("end", addr)
    except Exception as e:
        messagebox.showerror("CSV 파일 읽기 오류", str(e))

def run_gui():
    root = tk.Tk()
    root.title("지적도 GUI by 방찬영 (외곽선/내부경계 레이어 ON/OFF, 주소별 스타일)")
    root.geometry("970x570")

    address_list = []
    address_styles = {}

    stroke_color_var = tk.StringVar(value="#FFA500")
    fill_color_var = tk.StringVar(value="white")
    fill_opacity_var = tk.DoubleVar(value=0.2)
    inner_weight_var = tk.IntVar(value=2)
    outer_weight_var = tk.IntVar(value=4)

    # ------ 상단 주소입력 패널 ------
    frame_top = tk.Frame(root)
    frame_top.pack(fill="x", padx=10, pady=5)

    tk.Label(frame_top, text="시도").pack(side="left")
    sido_var = tk.StringVar()
    sido_combo = ttk.Combobox(frame_top, textvariable=sido_var, values=sido_list, state="readonly", width=14)
    sido_combo.pack(side="left", padx=2)

    def on_sido_selected(event=None):
        selected_sido = sido_var.get()
        sigungu_combo["values"] = sigungu_dict.get(selected_sido, [])
        sigungu_var.set("")

    sido_combo.bind("<<ComboboxSelected>>", on_sido_selected)

    tk.Label(frame_top, text="시군구").pack(side="left")
    sigungu_var = tk.StringVar()
    sigungu_combo = ttk.Combobox(frame_top, textvariable=sigungu_var, state="readonly", width=16)
    sigungu_combo.pack(side="left", padx=2)

    tk.Label(frame_top, text="동").pack(side="left")
    dong_entry = tk.Entry(frame_top, width=10)
    dong_entry.pack(side="left", padx=2)

    tk.Label(frame_top, text="지번").pack(side="left")
    jibun_entry = tk.Entry(frame_top, width=10)
    jibun_entry.pack(side="left", padx=2)

    btn_width = 13
    btn_height = 1

    btn_add_addr = tk.Button(frame_top, text="주소 추가", width=btn_width, height=btn_height)
    btn_add_addr.pack(side="left", padx=(20,2))
    btn_map = tk.Button(frame_top, text="지도 생성", width=btn_width, height=btn_height)
    btn_map.pack(side="left", padx=2)

    # 시군구 추가 버튼
    btn_add_sigungu = tk.Button(frame_top, text="시군구 추가", width=btn_width, height=btn_height)
    btn_add_sigungu.pack(side="left", padx=2)

    # ------ 메인 프레임(체크리스트와 버튼) ------
    frame_main = tk.Frame(root)
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    frame_left = tk.LabelFrame(frame_main, text="기능 실행", bd=2, relief="solid")
    frame_left.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
    frame_main.grid_columnconfigure(0, weight=1)
    frame_main.grid_rowconfigure(0, weight=1)

    checklist = tk.Listbox(frame_left, height=16, selectmode=tk.EXTENDED, width=10)
    checklist.grid(row=0, column=0, columnspan=4, padx=10, pady=(10, 2), sticky="nsew")
    frame_left.grid_rowconfigure(0, weight=1)
    for i in range(4):
        frame_left.grid_columnconfigure(i, weight=1)

    btn_csv_import = tk.Button(frame_left, text="CSV 불러오기", width=btn_width, height=btn_height)
    btn_delete_selected = tk.Button(frame_left, text="선택 주소 삭제", width=btn_width, height=btn_height)
    btn_std_addr = tk.Button(frame_left, text="주소 표준화", width=btn_width, height=btn_height)

    btn_csv_import.grid(row=1, column=0, padx=2, pady=2, sticky="we")
    btn_delete_selected.grid(row=2, column=0, padx=2, pady=2, sticky="we")
    btn_std_addr.grid(row=3, column=0, padx=2, pady=2, sticky="we")

    btn_outer_map = tk.Button(frame_left, text="외곽선 지도", width=btn_width, height=btn_height)
    btn_excel_save = tk.Button(frame_left, text="엑셀 저장", width=btn_width, height=btn_height)

    btn_outer_map.grid(row=1, column=1, padx=2, pady=2, sticky="we")
    btn_excel_save.grid(row=2, column=1, padx=2, pady=2, sticky="we")

    def add_addr():
        sido = sido_var.get()
        sigungu = sigungu_var.get()
        dong = dong_entry.get().strip()
        jibun = jibun_entry.get().strip()
        if not (sido and sigungu and dong and jibun):
            messagebox.showerror("오류", "모든 주소 정보를 입력하세요.")
            return
        full_address = f"{sido} {sigungu} {dong} {jibun}"
        address_list.append(full_address)
        checklist.insert(tk.END, full_address)
    btn_add_addr.config(command=add_addr)

    def add_sigungu_to_addresses():
        sido = sido_var.get()
        sigungu = sigungu_var.get()
        if not sido:
            messagebox.showerror("오류", "시도를 선택하세요.")
            return
        # 시군구가 비어있으면 시도만, 아니면 시도+시군구
        prefix = sido if not sigungu else f"{sido} {sigungu}"
        for i in range(len(address_list)):
            addr = address_list[i]
            # 이미 prefix가 붙어있다면 중복 방지
            if addr.startswith(f"{prefix} "):
                continue
            address_list[i] = f"{prefix} {addr}"
        checklist.delete(0, tk.END)
        for addr in address_list:
            checklist.insert(tk.END, addr)
        messagebox.showinfo("완료", f"{prefix}가 주소 앞에 추가되었습니다.")

    btn_add_sigungu.config(command=add_sigungu_to_addresses)

    def generate_map():
        if not address_list:
            messagebox.showerror("오류", "주소가 없습니다.")
            return
        features = []
        for addr in address_list:
            try:
                pnu = address_to_pnu(addr)
                gj = get_geojson_by_pnu(pnu)
                for f in gj["features"]:
                    if "properties" not in f:
                        f["properties"] = {}
                    f["properties"]["addr"] = addr
                features.extend(gj['features'])
            except Exception as e:
                print(f"[오류] {addr}: {e}")
        if not features:
            messagebox.showerror("실패", "유효한 지번이 없습니다.")
            return

        global excel_features
        excel_features = features.copy()

        create_map_with_outer_and_inner_layers(
            {"type": "FeatureCollection", "features": features},
            address_styles,
            stroke_color=stroke_color_var.get(),
            fill_color=fill_color_var.get(),
            fill_opacity=fill_opacity_var.get(),
            inner_weight=inner_weight_var.get(),
            outer_weight=outer_weight_var.get()
        )

        def generate_outer_map():
            if not address_list:
                messagebox.showerror("오류", "주소가 없습니다.")
                return
            features = []
            for addr in address_list:
                try:
                    pnu = address_to_pnu(addr)
                    gj = get_geojson_by_pnu(pnu)
                    for f in gj['features']:
                        if 'properties' not in f:
                            f['properties'] = {}
                        f['properties']['addr'] = addr
                    features.extend(gj['features'])
                except Exception as e:
                    print(f"[오류] {addr}: {e}")
            if not features:
                messagebox.showerror("실패", "유효한 지번이 없습니다.")
                return
            create_outer_only_map(
                {"type": "FeatureCollection", "features": features},
                outer_weight=outer_weight_var.get()
            )

        btn_map.config(command=generate_map)
        btn_outer_map.config(command=generate_outer_map)

    def excel_save():
        save_to_excel()
    btn_excel_save.config(command=excel_save)

    def csv_import():
        load_addresses_from_input_csv(address_list, checklist)
    btn_csv_import.config(command=csv_import)

    def delete_selected():
        selected = checklist.curselection()
        for index in reversed(selected):
            checklist.delete(index)
            del address_list[index]
    btn_delete_selected.config(command=delete_selected)

    def standardize_addresses():
        if not address_list:
            messagebox.showinfo("안내", "표준화할 주소가 없습니다.")
            return
        sido_mapping = {
            "서울": "서울특별시", "부산": "부산광역시", "대구": "대구광역시", "인천": "인천광역시",
            "광주": "광주광역시", "대전": "대전광역시", "울산": "울산광역시", "세종": "세종특별자치시",
            "경기": "경기도", "강원": "강원특별자치도", "충북": "충청북도", "충남": "충청남도",
            "전북": "전북특별자치도", "전남": "전라남도", "경북": "경상북도", "경남": "경상남도",
            "제주": "제주특별자치도"
        }
        sido_pattern = "|".join(sido_mapping.keys())

        def normalize_address(addr):
            addr = re.sub(r"\(.*?\)", "", addr).strip()
            match = re.match(rf"({sido_pattern})(시|도|광역시|특별시|특별자치시|특별자치도)?", addr)
            if match:
                raw_sido = match.group(1)
                full_sido = sido_mapping.get(raw_sido, raw_sido)
                rest = addr[match.end():].lstrip()
                return f"{full_sido} {rest}".strip()
            for sido, sigungus in sigungu_dict.items():
                for sigungu in sigungus:
                    if addr.startswith(sigungu):
                        rest = addr[len(sigungu):].lstrip()
                        return f"{sido} {sigungu} {rest}".strip()
            return addr.strip()

        for i in range(len(address_list)):
            address_list[i] = normalize_address(address_list[i])

        checklist.delete(0, tk.END)
        for addr in address_list:
            checklist.insert(tk.END, addr)
        messagebox.showinfo("완료", "주소 표준화가 완료되었습니다.")
    btn_std_addr.config(command=standardize_addresses)

    def apply_style_to_selected():
        selected_indices = checklist.curselection()
        style = {
            "stroke": stroke_color_var.get(),
            "fill": fill_color_var.get(),
            "opacity": fill_opacity_var.get()
        }
        for i in selected_indices:
            addr = checklist.get(i)
            address_styles[addr] = style.copy()
        if selected_indices:
            messagebox.showinfo("완료", "스타일이 선택된 주소에 적용되었습니다.")
        else:
            messagebox.showwarning("알림", "적용할 주소를 선택하세요.")

    frame_right_container = tk.Frame(frame_main)
    frame_right_container.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
    frame_main.grid_columnconfigure(1, weight=2)

    frame_right = tk.LabelFrame(frame_right_container, text="스타일 설정", bd=2, relief="solid", height=350)
    frame_right.pack(fill="x", pady=(0, 10))
    frame_right.pack_propagate(False)

    tk.Label(frame_right, text="선 색상").pack()
    tk.Button(frame_right, text="선 색상 선택", width=btn_width, height=1, command=lambda: stroke_color_var.set(
        colorchooser.askcolor(initialcolor=stroke_color_var.get())[1])).pack(pady=2)
    tk.Label(frame_right, text="채움 색상").pack()
    tk.Button(frame_right, text="채움 색상 선택", width=btn_width, height=1,
              command=lambda: fill_color_var.set(colorchooser.askcolor(initialcolor=fill_color_var.get())[1])).pack(pady=2)
    tk.Label(frame_right, text="채움 투명도 (0.0 ~ 1.0)").pack()
    tk.Entry(frame_right, textvariable=fill_opacity_var, width=btn_width).pack(pady=(0, 5))
    tk.Label(frame_right, text="내부선 굵기").pack()
    tk.Scale(
        frame_right, from_=0, to=10,
        orient=tk.HORIZONTAL, variable=inner_weight_var,
        resolution=1
    ).pack(pady=(0, 5))
    tk.Label(frame_right, text="외곽선 굵기").pack()
    tk.Scale(
        frame_right, from_=1, to=10,
        orient=tk.HORIZONTAL, variable=outer_weight_var,
        resolution=1
    ).pack(pady=(0, 5))
    btn_apply_style = tk.Button(frame_right, text="스타일 적용", width=btn_width, height=btn_height, command=apply_style_to_selected)
    btn_apply_style.pack(pady=6)

    frame_guide = tk.LabelFrame(frame_right_container, text="사용법", bd=2, relief="solid", height=80)
    frame_guide.pack(fill="both", expand=True)
    frame_guide.pack_propagate(False)
    guide_text = (
        "※ DuoN에 프로그램 추가한 후 사용하세요!\n"
        "   1년 경과시 'vworld_key.txt' 파일내 api키를 업데이트 해주세요.\n\n"
        "1. 'CSV 불러오기'로 주소목록을 불러옵니다.\n"
        "   (상단의 주소 추가로 직접 입력할 수도 있습니다.)\n"
        "2. 시도/시군구를 선택후 '시군구 추가'를 누르면 모든주소에 시도/시군구가 붙습니다.\n"
        "3. 원하는 주소를 선택 후 '스타일 적용'을 눌러주세요.\n"
        "4. '지도 생성' 버튼으로 HTML 지적도를 만듭니다.\n"
        "5. '엑셀 저장'으로 필지 정보를 저장할 수 있습니다.\n\n"
        "※ 지도생성 전에 주소 표준화 버튼을 눌러주시면 에러가 생길 확률이 적습니다.\n"
        "    시군구(ex:성남시 분당구)까지 입력하셨을 경우, 주소 표준화만 눌러도 됩니다."
    )
    tk.Label(frame_guide, text=guide_text, justify="left").pack(anchor="w", padx=10, pady=5)

    root.mainloop()

if __name__ == "__main__":
    run_gui()
